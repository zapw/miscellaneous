Instructions for syncing machines with lab-git (10.103.106.199)
---------------------------

1) Connect with putty or vnc to one of the supermicros machines we sent
  
 a) If connecting via putty (https://the.earth.li/~sgtatham/putty/latest/w64/putty.exe)  
                the username: sv10g      
                password: $giga

b) if connecting via vnc the password is: 123456
   open a terminal window and type into it:
                  
   sudo su - sv10g (Press ENTER)
-----------------------------------------------------------------------                                                                                                          

3) Setup environment to work with lab-git, type into the terminal:

   sudo /net/10.103.106.199/data/things/scripts/setup_kiev  (Press ENTER)

                you should see on your screen:
                   patching file git.sh
           patching file csealiases.sh

----------------------------------------------------------------------------

4) Reload bash with a login session to read the new environment changes, type into the terminal:
   
    exec bash -l (Press ENTER)

5) This will prompt for your full name, it will be used by git to identify the commiter, type into the terminal:
    
    git_setup  (Press ENTER)

6) create denver working directory, type into the terminal:
   
    mkdir /home/sv10g/denver (Press ENTER)

7) change to the newly created directory, type into the terminal:
   
   cd /home/sv10g/denver (Press ENTER)

8) Execute install_denver script, this will clone from lab-git the necessary repositories and compile/install FwKiev_team tests, type into the terminal:
    install_denver -t FwKiev_team (Press ENTER)

8) Change to working directory, type into the terminal:
  cd /home/sv10g/denver/Denver/teams/FwKiev_team (Press ENTER)

9) under this directory ( '/home/sv10g/denver/Denver/teams/FwKiev_team' ) you are able to add/remove commit and merge/push your changes to lab-git.
    Here are same basic git commands to get started:

    a) Before commiting to lab-git one must pull in any changes already commited to it first
       git pull (Press ENTER)

    b) adding new files/directories to be commited:
      let's say we have directory named 'dir1' and a file named 'file1' and we want to add this directory and file, type in:
   
      git add dir1 file1  (Press ENTER)

    c) To remove a directory named 'dir1' and file named 'file1' you would use the command:
                git rm dir1 file1 (Press ENTER)
   
    c)This prints current files/directories added/removed
      git status (Pess ENTER)

    d)This will commit (create a new snapshot of the current state of your working directory with a commit id attached to it)
      git commit -m 'Short Description of changes made for this commit'  (Press ENTER) # what follows -m is a short message description for this commit you can see the results with:

    e)This will print history of commits, this prints your commit history along with the commit message attached to each commit
      git log (Press ENTER)

    f)Finnaly to push to lab-git the new changes so co-workers can see them
      git push origin (Press ENTER)

10) Extra commands that must be used with caution
     This will reset your working directory to reflact with the latest snapshot commited to lab-git ( It will discard and lose any changes you may have done locally and not commited and/or any commits that haven't been pushed to lab-git yet!)
       git reset --hard refs/remotes/origin/master (Press ENTER)


----------------------
GERRIT


Gerrit is installed on:
                http://lab-git:8080

users:
                admin / admin00  (Administrator user - this user can review/accept changes and merge them into master branch)
                sv10g / $giga ( Developer User)

steps to prepare FwKiev_team repositorty to work with gerrit:

Run: 
/net/10.103.106.199/data/things/scripts/setup_kiev

This will create a new cseexports.sh in /etc/profile.d/  and add lab-git’s address to “no_proxy” environment variable.

1)install required package: 
                sudo yum install -y git-review

2)
                cd /home/sv10g/denver/Denver/teams/FwKiev_team
                git pull --rebase ( This will download a new file .gitreview )


3)

when working Gerrit for the first time this command needs to be executed:

git review  --setup  ( this will download the commit-msg hook and install it under /home/sv10g/denver/Denver/teams/FwKiev_team/.git/hooks/commit-msg   )

this hook is what creates the required Change-id  footer
                
--------------------------------------------------------------------------

to send code for review to gerrit use the command 'git review' instead of 'git push origin'

Gerrit uses what is called 'Change-ID' to keep track of different patchsets of the same change

this is how it is used:
if your code is not accepted after review you can make new changes to your files 
 and then commit the changes with 'git commit --amend' the previous commit message and Change-ID value will not change.
run: git review , and it will appear in Gerrit as a new patch set of your previous commit for easier review of the changes you made.

 
NOTES:
1)
if you get a prompt saying to squash your commits to one for a cleaner history, do this ( not mandatory ):

  git rebase -i HEAD~number  ,where "number" is the number of the parent commit from HEAD  ( it's the number of commits pasted from above message )

 
  example :git rebase -i HEAD~4
  will rebase against the 4th parent commit starting from HEAD

  an editor will open change 'p' letter to 's' for all the bottom commits except the first.

2)
   use 'git pull --rebase gerrit' instead of 'git pull gerrit' to keep the history clean ( git log ), 'git review' does an automatic git pull --rebase.
   'git pull' without specifying repository will use 'origin' by default which is the previous setup and bypasses gerrit ( both previous git setup and gerrit synchronize to the same repository fwkiev_team)
---------------------------------------------------------------------------------------------------

for more information about git review type: 'git review --help'

