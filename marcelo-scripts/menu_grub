#!/bin/bash
#run with, -l
#to list boot entries
#to set/choose an entry
#run with, -s <entry>
#example  menu_grub -s 0  or  menu_grub -s 'Fedora, with Linux 3.19.8-100.fc20.x86_64'

usage () {
cat <<EOF
 run with '-l' to list boot entries
 to set/choose an entry, run with -s <entry>
 
 example:  $0 -s 0  or  $0 -s 'Fedora, with Linux 3.19.8-100.fc20.x86_64'
EOF
 exit 0
}


while (( ${#@} > 0 )); do
  case $1 in
	-h)
	  usage
	  shift
	  ;;
	-l)
	  list=1
	  shift
	  ;;
	-s*)
	   if [[ ${1#-s} != "" ]]; then
		 setentry="${1#-s}"
		 shift
	   else
		 shift
		 if [[ $1 == "-l" ]]; then
		   echo "Missing entry for: -s" >&2
		   exit 1
		 else
		   if [[ -n $1 ]]; then
		     setentry=$1
		     shift
		   else
		     echo "Missing entry for: -s" >&2
		     exit 1
		   fi
		 fi
	   fi
	   ;;
	*)
	 shift
	;;
  esac
done

if [[ -n "$setentry" && -n "$list" ]]; then
  echo "-l and -s, are mutually exclusive" >&2
  exit 1
fi

check_for_ed () {
 type ed >/dev/null 2>&1 || sudo yum install -y ed
}

cleanup() {
 [[ ! $@ ]] && return
 sudo umount -f "$@"
 sudo rmdir "$@"
}

trap '{ cleanup $d ; trap - EXIT; exit 1 ;}' TERM INT
trap '{ cleanup $d ;}' EXIT

setdefault () {
  local newdef="$1"
  if [[ $mbr == eb48 ]]; then 
  	echo "Changing default entry to '$newdef'" 
	printf "%s\n" '1c' "$newdef"  . w | sudo ed -s "$mntp/boot/grub/default"
  else
  	echo "Running 'grub-set-default \"$newdef\"'" 
  	sudo /usr/sbin/chroot "$mntp" "/usr/sbin/grub2-set-default" "$newdef"
  fi
  return $?
}

menu() {
  local mntp="$1"
  if [[ $mbr == eb48 ]]; then
	grub_cfg="$mntp/boot/grub/menu.lst"
  	readarray -t options < <(sudo awk '/^[[:space:]]*title/ {  gsub(/^[[:space:]]*title[[:space:]]*/, "") ; print }' "$grub_cfg")
  else
  	grub_cfg="$mntp/boot/grub2/grub.cfg"
  	readarray -t options < <(sudo awk -F\' '$1=="menuentry " {print $2}' "$grub_cfg")
  fi
  
  if [[ -n $list ]]; then
    for i in "${options[@]}"; do echo "$((x++)): $i"; done
    return $?
  elif [[ -n $setentry ]]; then
    if [[ $setentry == +([[:digit:]]) ]]; then
      if (( setentry > ((${#options[@]}-1)) || setentry < 0 )); then
	printf "%s\n" "Entry is '$setentry'" "Out of range" >&2 && exit 1
      else
        setdefault "$setentry"
	return $?
      fi
    else
	for ((i=0; i < ${#options[@]}; i++));do 
          if [[ $setentry == ${options[i]} ]]; then
	    setdefault "$i"
	    return $?
          fi
	done
    fi
    echo "$setentry: not valid" >&2 && exit 1
  fi

  options+=("Quit")
  PS3='Please enter your choice: '
  select opt in "${options[@]}"
  do
   [[ $opt = "Quit" ]] && return 1
   if [[ -n $opt ]]; then
	for ((i=0; i < ${#options[@]}; i++));do 
          if [[ $opt == ${options[i]} ]]; then
	    setdefault "$i"
	    return $?
          fi
	done
   fi
  done
}

lzma_ver='--lzma1'
lzma_options='dict=65535,lc=3,lp=0,pb=2' # LZMA1/LZMA2 options used in "mkimage.c".

shopt -s nullglob
for disk in /sys/block/sd*; do 
  blockdev="${disk/#*\///dev/}"
  partnum=$(awk '$1 ~ "/boot/grub2" {match($1, /[0-9]+/, Arr); print Arr[0]}' \
		< <(dd if="$blockdev" bs=3888 skip=1 count=1024 | \
			xz --decompress --stdout --format=raw $lzma_ver=$lzma_options 2>/dev/null | strings))
  if [[ $partnum == +([[:digit:]]) ]]; then
	break
  else
     mbr=$(hexdump -v -n 512 -e '/1 "%02x"' "$blockdev") 
     mbr=${mbr:0:4}
     if [[ $mbr == eb48 ]]; then
	    grub_string=$(hexdump -v -s 1042 -n 94 -e '"%_u"' "$blockdev");
            grub_version="${grub_string%%nul*}";

            part_info=$((1045 + ${#grub_version}));
            eval $(hexdump -v -s "$part_info" -n 2 -e '1/1 "pa=%u; " 1/1 "dr=%u"' "$blockdev");

            dr=$(( dr - 127 ));
            pa=$(( pa + 1 ));

            if (( dr == 128 )); then
                partnum=$pa
     		break
            else
                echo "Unsupported grub stage2 on drive $dr not on same drive as $blockdev"
		exit 1
            fi
     fi
  fi
done

if [[ $partnum != +([[:digit:]]) ]]; then
	echo "Grub not found, exiting..." >&2
        exit 1
else
	device="${blockdev}${partnum}"
  	if sudo mkdir -p "/mnt/${device##*/}"; then
	    d="/mnt/${device##*/}"
	    sudo umount -f "$d" 2>/dev/null
	    sudo mount "$device" "$d" || exit 1
	    check_for_ed
	    if [[ $mbr == eb48 ]]; then
		printf "%s\n" '/^[[:space:]]*default[= ]/d' '/^[[:space:]]*title /i' "default saved" . w | sudo ed -s "$d/boot/grub/menu.lst" 2>/dev/null
	    else
	    	printf "%s\n" '/### BEGIN \/etc\/grub.d\/00_header ###/+1,/### END \/etc\/grub.d\/00_header ###/-1c' \
			"$(sudo cat "$d/etc/default/grub" "$d/etc/grub.d/00_header" | sudo /usr/sbin/chroot "$d" bash)" . w | sudo ed -s "$d/boot/grub2/grub.cfg" 
	    fi
	    menu "$d" 
	    exit $?
	 else
	    exit 1
         fi
fi

exit 0
